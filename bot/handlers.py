# bot/handlers.py

import logging
from datetime import datetime
from zoneinfo import ZoneInfo, ZoneInfoNotFoundError
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from .keyboards import TIMEZONE_KEYBOARD, TIMEZONE_CALLBACK_PREFIX
from .db import create_user, get_user, add_transaction, update_daily_norm
from .logic import calculate_status

logger = logging.getLogger(__name__)

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —è–≤–Ω–æ, —á—Ç–æ–±—ã –ª–∏–Ω—Ç–µ—Ä –Ω–µ —Ä—É–≥–∞–ª—Å—è.
# –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
GET_NORM, GET_TIMEZONE = 0, 1
# –î–∏–∞–ª–æ–≥ —Å–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:
CHANGING_NORM = 2


# --- –î–ò–ê–õ–û–ì –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
async def start(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: context –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ _context, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."""
    user = update.effective_user
    db_user = get_user(user.id)
    if db_user:
        await update.message.reply_text("–¢—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –≤–æ—è–∫–∞. –í–Ω–æ—Å–∏ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –∂–º–∏ /status.")
        return ConversationHandler.END
    await update.message.reply_text(
        f"–ó–¥–∞—Ä–æ–≤–∞, {user.first_name}. –í–∏–∂—É —Ç–µ–±—è –≤–ø–µ—Ä–≤—ã–µ.\n–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É —Ç—Ä–∞—Ç. –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤ –¥–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å —Ç—Ä–∞—Ç–∏—Ç—å? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ.")
    return GET_NORM


async def get_norm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        daily_norm = float(update.message.text)
        if daily_norm <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ê –Ω—É-–∫–∞, –≤–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
        return GET_NORM
    context.user_data['daily_norm'] = daily_norm
    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...", reply_markup=TIMEZONE_KEYBOARD)
    return GET_TIMEZONE


async def get_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    timezone_str = query.data.split(":")[1]
    daily_norm = context.user_data.get('daily_norm')
    user = update.effective_user
    create_user(user_id=user.id, daily_norm=daily_norm, timezone=timezone_str)
    context.user_data.clear()
    await query.edit_message_text(
        text=f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –Ω–æ—Ä–º–∞: {daily_norm} —Ä—É–±/–¥–µ–Ω—å.\n–¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}.\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —á–∏—Å–ª–∞, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏—à—å.")
    return ConversationHandler.END


# --- –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ú–ï–ù–´ –î–õ–Ø –í–°–ï–• –î–ò–ê–õ–û–ì–û–í ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# --- –ù–û–í–´–ô –î–ò–ê–õ–û–ì –î–õ–Ø /settings ---

async def settings_entry(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: context –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ _context, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."""
    user_id = update.effective_user.id
    db_user = get_user(user_id)

    if not db_user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start, —É–º–Ω–∏–∫.")
        return ConversationHandler.END

    try:
        user_tz = ZoneInfo(db_user["timezone"])
    except ZoneInfoNotFoundError:
        user_tz = ZoneInfo("Europe/Moscow")

    today_day_number = datetime.now(user_tz).day
    reset_day = db_user["reset_day"]

    if today_day_number == reset_day:
        norm_str = str(db_user['daily_norm']).replace('.', ',')
        await update.message.reply_text(
            f"–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞: `{norm_str}` —Ä—É–±\\.\n"
            "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å —Å–±—Ä–æ—Å–∞! –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–µ –ø–æ–º–µ–Ω—è—Ç—å\\.",
            parse_mode='MarkdownV2'
        )
        return CHANGING_NORM
    else:
        await update.message.reply_text(
            f"–°–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å\\. –°–º–µ–Ω–∞ –Ω–æ—Ä–º—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ *{reset_day}* —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\\.\n"
            "–ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ, —Å–∞–ª–∞–≥–∞\\.",
            parse_mode='MarkdownV2'
        )
        return ConversationHandler.END


async def receive_new_norm(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: context –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ _context, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."""
    try:
        new_norm = float(update.message.text.strip().replace(',', '.'))
        if new_norm <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–º–º—É. –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –∂–º–∏ /cancel\\.")
        return CHANGING_NORM

    user_id = update.effective_user.id
    update_daily_norm(user_id, new_norm)

    norm_str = str(new_norm).replace('.', ',')
    await update.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ\\. –¢–≤–æ—è –Ω–æ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: `{norm_str}` —Ä—É–±\\.",
                                    parse_mode='MarkdownV2')
    return ConversationHandler.END


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ù–ï –î–ò–ê–õ–û–ì–û–í ---
async def status_handler(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: context –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ _context, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."""
    user_id = update.effective_user.id
    user_status = calculate_status(user_id)
    if not user_status:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        return

    norm_str = str(round(user_status['base_norm'], 2)).replace('.', ',')
    balance_str = str(round(user_status['balance'], 2)).replace('.', ',')
    available_str = str(round(user_status['available_today'], 2)).replace('.', ',')
    spent_str = str(round(user_status['spent_today'], 2)).replace('.', ',')
    remaining_str = str(round(user_status['remaining_today'], 2)).replace('.', ',')

    text = (
        f"üìä *–¢–≤–æ—è —Å–≤–æ–¥–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
        f"–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞: `{norm_str}`\n"
        f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ/–¥–æ–ª–≥: `{balance_str}`\n\n"
        f"‚úÖ *–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–≥–æ–¥–Ω—è:* `{available_str}`\n"
        f" –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent_str}`\n"
        f" –æ—Å—Ç–∞—Ç–æ–∫: `{remaining_str}`"
    )
    await update.message.reply_text(text, parse_mode='MarkdownV2')


async def transaction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not get_user(user_id):
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å, –∂–º–∏ /start.")
        return
    try:
        amount = float(update.message.text.strip().replace(',', '.'))
        if amount <= 0: raise ValueError
    except (ValueError, TypeError):
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–º–º—É\\. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä `150` –∏–ª–∏ `123\\.45`",
                                        parse_mode='MarkdownV2')
        return
    add_transaction(user_id, amount)
    # –í—ã–∑—ã–≤–∞–µ–º status_handler, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É context, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç
    await status_handler(update, context)


# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
def register_handlers(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""

    registration_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_norm)],
            GET_TIMEZONE: [CallbackQueryHandler(get_timezone, pattern=f"^{TIMEZONE_CALLBACK_PREFIX}:")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        conversation_timeout=600  # 10 –º–∏–Ω—É—Ç
    )

    settings_conv = ConversationHandler(
        entry_points=[CommandHandler("settings", settings_entry)],
        states={
            CHANGING_NORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_new_norm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        conversation_timeout=300  # 5 –º–∏–Ω—É—Ç
    )

    application.add_handler(registration_conv)
    application.add_handler(settings_conv)

    application.add_handler(CommandHandler("status", status_handler))
    application.add_handler(
        MessageHandler(filters.Regex(r'^\d+([.,]\d{1,2})?$') & ~filters.COMMAND, transaction_handler))
