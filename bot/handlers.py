import logging
from datetime import datetime
from zoneinfo import ZoneInfo, ZoneInfoNotFoundError
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from .keyboards import (
    TIMEZONE_KEYBOARD, TIMEZONE_CALLBACK_PREFIX,
    CONFIRM_DELETE_KEYBOARD, CONFIRM_DELETE_CALLBACK_PREFIX
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py
from .db import create_user, get_user, add_transaction, update_daily_norm, delete_user
from .logic import calculate_status

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¢–†–ï–• —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
GET_NORM, GET_TIMEZONE = 0, 1
CHANGING_NORM = 2
CONFIRM_DELETION = 3


# --- –î–ò–ê–õ–û–ì –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
async def start(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    db_user = get_user(user.id)
    if db_user:
        await update.message.reply_text("–¢—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –≤–æ—è–∫–∞. –í–Ω–æ—Å–∏ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –∂–º–∏ /status.")
        return ConversationHandler.END
    await update.message.reply_text(
        f"–ó–¥–∞—Ä–æ–≤–∞, {user.first_name}. –í–∏–∂—É —Ç–µ–±—è –≤–ø–µ—Ä–≤—ã–µ.\n–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É —Ç—Ä–∞—Ç. –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤ –¥–µ–Ω—å —Ç—ã —Ö–æ—á–µ—à—å —Ç—Ä–∞—Ç–∏—Ç—å? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ.")
    return GET_NORM


# ... (–∫–æ–¥ get_norm, get_timezone –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def get_norm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        daily_norm = float(update.message.text)
        if daily_norm <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ê –Ω—É-–∫–∞, –≤–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
        return GET_NORM
    context.user_data['daily_norm'] = daily_norm
    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...", reply_markup=TIMEZONE_KEYBOARD)
    return GET_TIMEZONE


async def get_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    timezone_str = query.data.split(":")[1]
    daily_norm = context.user_data.get('daily_norm')
    user = update.effective_user
    create_user(user_id=user.id, daily_norm=daily_norm, timezone=timezone_str)
    context.user_data.clear()
    await query.edit_message_text(
        text=f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –Ω–æ—Ä–º–∞: {daily_norm} —Ä—É–±/–¥–µ–Ω—å.\n–¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}.\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —á–∏—Å–ª–∞, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏—à—å.")
    return ConversationHandler.END


# --- –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ú–ï–ù–´ –î–õ–Ø –í–°–ï–• –î–ò–ê–õ–û–ì–û–í ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# --- –î–ò–ê–õ–û–ì –î–õ–Ø /settings ---
async def settings_entry(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ settings_entry –∏ receive_new_norm –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_id = update.effective_user.id
    db_user = get_user(user_id)
    if not db_user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start, —É–º–Ω–∏–∫.")
        return ConversationHandler.END
    try:
        user_tz = ZoneInfo(db_user["timezone"])
    except ZoneInfoNotFoundError:
        user_tz = ZoneInfo("Europe/Moscow")
    today_day_number = datetime.now(user_tz).day
    reset_day = db_user["reset_day"]
    if today_day_number == reset_day:
        norm_str = str(db_user['daily_norm']).replace('.', ',')
        await update.message.reply_text(
            f"–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞: `{norm_str}` —Ä—É–±\\.\n"
            "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å —Å–±—Ä–æ—Å–∞! –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–µ –ø–æ–º–µ–Ω—è—Ç—å\\.",
            parse_mode='MarkdownV2'
        )
        return CHANGING_NORM
    else:
        await update.message.reply_text(
            f"–°–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å\\. –°–º–µ–Ω–∞ –Ω–æ—Ä–º—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ *{reset_day}* —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\\.\n"
            "–ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ, —Å–∞–ª–∞–≥–∞\\.",
            parse_mode='MarkdownV2'
        )
        return ConversationHandler.END


async def receive_new_norm(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        new_norm = float(update.message.text.strip().replace(',', '.'))
        if new_norm <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–º–º—É. –í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –∂–º–∏ /cancel\\.")
        return CHANGING_NORM
    user_id = update.effective_user.id
    update_daily_norm(user_id, new_norm)
    norm_str = str(new_norm).replace('.', ',')
    await update.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ\\. –¢–≤–æ—è –Ω–æ–≤–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: `{norm_str}` —Ä—É–±\\.",
                                    parse_mode='MarkdownV2')
    return ConversationHandler.END


# --- –ù–û–í–´–ô –î–ò–ê–õ–û–ì –î–õ–Ø /delete_me ---

async def delete_me_entry(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è. –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    user_id = update.effective_user.id
    if not get_user(user_id):
        await update.message.reply_text("–¢–µ–±—è –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ –±–∞–∑–µ, —á–µ–≥–æ —É–¥–∞–ª—è—Ç—å-—Ç–æ?")
        return ConversationHandler.END

    await update.message.reply_text(
        "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å *–ü–û–õ–ù–û–°–¢–¨–Æ* —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í–µ—Å—å —Ç–≤–æ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã –∫ —Ö—É—è–º.",
        reply_markup=CONFIRM_DELETE_KEYBOARD,
        parse_mode='Markdown'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Markdown, –æ–Ω –ø—Ä–æ—â–µ
    )
    return CONFIRM_DELETION


async def confirm_deletion(update: Update, _context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º 'yes' –∏–ª–∏ 'no' –∏–∑ callback_data
    choice = query.data.split(":")[1]

    if choice == "yes":
        user_id = update.effective_user.id
        delete_user(user_id)
        await query.edit_message_text("–í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ /start.")
    else:
        await query.edit_message_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    return ConversationHandler.END


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ù–ï –î–ò–ê–õ–û–ì–û–í ---
async def status_handler(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ status_handler –∏ transaction_handler –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_id = update.effective_user.id
    user_status = calculate_status(user_id)
    if not user_status:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        return
    norm_str = str(round(user_status['base_norm'], 2)).replace('.', ',')
    balance_str = str(round(user_status['balance'], 2)).replace('.', ',')
    available_str = str(round(user_status['available_today'], 2)).replace('.', ',')
    spent_str = str(round(user_status['spent_today'], 2)).replace('.', ',')
    remaining_str = str(round(user_status['remaining_today'], 2)).replace('.', ',')
    text = (
        f"üìä *–¢–≤–æ—è —Å–≤–æ–¥–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
        f"–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞: `{norm_str}`\n"
        f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ/–¥–æ–ª–≥: `{balance_str}`\n\n"
        f"‚úÖ *–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–≥–æ–¥–Ω—è:* `{available_str}`\n"
        f" –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent_str}`\n"
        f" –æ—Å—Ç–∞—Ç–æ–∫: `{remaining_str}`"
    )
    await update.message.reply_text(text, parse_mode='MarkdownV2')


async def transaction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not get_user(user_id):
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å, –∂–º–∏ /start.")
        return
    try:
        amount = float(update.message.text.strip().replace(',', '.'))
        if amount <= 0: raise ValueError
    except (ValueError, TypeError):
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–º–º—É\\. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä `150` –∏–ª–∏ `123\\.45`",
                                        parse_mode='MarkdownV2')
        return
    add_transaction(user_id, amount)
    await status_handler(update, context)


# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
def register_handlers(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""

    registration_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_norm)],
            GET_TIMEZONE: [CallbackQueryHandler(get_timezone, pattern=f"^{TIMEZONE_CALLBACK_PREFIX}:")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=600
    )

    settings_conv = ConversationHandler(
        entry_points=[CommandHandler("settings", settings_entry)],
        states={
            CHANGING_NORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_new_norm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=300
    )

    # –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è
    delete_conv = ConversationHandler(
        entry_points=[CommandHandler("delete_me", delete_me_entry)],
        states={
            CONFIRM_DELETION: [CallbackQueryHandler(confirm_deletion, pattern=f"^{CONFIRM_DELETE_CALLBACK_PREFIX}:")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=60
    )

    application.add_handler(registration_conv)
    application.add_handler(settings_conv)
    application.add_handler(delete_conv)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥

    application.add_handler(CommandHandler("status", status_handler))
    application.add_handler(
        MessageHandler(filters.Regex(r'^\d+([.,]\d{1,2})?$') & ~filters.COMMAND, transaction_handler))
